# -*- coding: utf-8 -*-
"""Data-Analytic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sV-PeMFbsbLkOEKHsjDuzEAfQVSx5wyL
"""

# Install XGBoost if not already installed
!pip install xgboost --quiet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error

from xgboost import XGBRegressor

# --- Generate synthetic dataset to simulate energy consumption ---

np.random.seed(42)
date_rng = pd.date_range(start='2023-01-01', end='2023-02-28 23:00', freq='H')

# Base consumption with daily seasonality + random noise
base_consumption = 2 + 0.5 * np.sin(2 * np.pi * date_rng.hour / 24) + np.random.normal(0, 0.2, len(date_rng))

# Add weekday/weekend effect
day_of_week = date_rng.dayofweek
weekend_effect = np.where(day_of_week >= 5, 0.3, 0)
energy_consumption = base_consumption + weekend_effect

df_hourly = pd.DataFrame({'Global_active_power': energy_consumption}, index=date_rng)

# Feature Engineering
df_hourly['hour'] = df_hourly.index.hour
df_hourly['day_of_week'] = df_hourly.index.dayofweek
df_hourly['is_weekend'] = df_hourly['day_of_week'].isin([5,6]).astype(int)
df_hourly['lag_1'] = df_hourly['Global_active_power'].shift(1)
df_hourly['lag_24'] = df_hourly['Global_active_power'].shift(24)
df_hourly['rolling_mean_3'] = df_hourly['Global_active_power'].rolling(window=3).mean()

df_hourly.dropna(inplace=True)

# Prepare features and target
features = ['hour', 'day_of_week', 'is_weekend', 'lag_1', 'lag_24', 'rolling_mean_3']
X = df_hourly[features]
y = df_hourly['Global_active_power']

# Train-test split (80-20)
train_size = int(len(df_hourly) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Scaling
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model training
model = XGBRegressor(n_estimators=100, learning_rate=0.1, verbosity=0)
model.fit(X_train_scaled, y_train)

# Prediction
y_pred = model.predict(X_test_scaled)

# Evaluation
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100

print(f"MAE: {mae:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAPE: {mape:.2f}%")

# Visualization
plt.figure(figsize=(15,6))
plt.plot(y_test.index, y_test, label='Actual')
plt.plot(y_test.index, y_pred, label='Predicted')
plt.title('Actual vs Predicted Energy Consumption (Synthetic Data)')
plt.xlabel('Datetime')
plt.ylabel('Global Active Power (kW)')
plt.legend()
plt.show()